import os
import cv2
import sys
import shutil
import numpy as np
from PIL import Image

raw_icon_path = "C:/Users/g0mx/Desktop/detect_malware_by_icon/icon"
extracted_icon_path = "C:/Users/g0mx/Desktop/malware_icon"
no_similar_path = "C:/Users/g0mx/Desktop/no_similar/"

def pHash(img, leng = 32, wid = 32):
    img = cv2.resize(img, (leng, wid))   
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    dct = cv2.dct(np.float32(gray))
    dct_roi = dct[0:8, 0:8]            
    avreage = np.mean(dct_roi)
    phash_01 = (dct_roi > avreage) + 0
    phash_list = phash_01.reshape(1,-1)[0].tolist()
    hash = ''.join([str(x) for x in phash_list])
    return hash

def Hamming_distance(hash1,hash2):
    num = 0
    for index in range(len(hash1)):
        if hash1[index] != hash2[index]:
            num += 1
    return num 

def get_img_file(dir_path):
    file_list = []
    for root, dir_names, file_names in os.walk(dir_path):
        for file_name in file_names:
            file_list.append(os.path.join(root, file_name))
        return file_list

if __name__ == "__main__":
    raw_icon_list = get_img_file(raw_icon_path)
    extracted_icon_list = get_img_file(extracted_icon_path)

    for t_extracted_icon in extracted_icon_list:
        final_dist = 100
        print(t_extracted_icon)
        extracted_icon = cv2.imread(t_extracted_icon)
        extracted_icon_phash = pHash(extracted_icon)
        for t_raw_icon in raw_icon_list:
            raw_icon = cv2.imread(t_raw_icon)
            temp_dist = Hamming_distance(extracted_icon_phash, pHash(raw_icon))
            if temp_dist <= final_dist:
                final_dist = temp_dist
        if final_dist > 10:
            print(final_dist)
            file_tuple = os.path.split(t_extracted_icon)
            no_similar_file_path = no_similar_path + file_tuple[1]
            shutil.copy(t_extracted_icon, no_similar_file_path)
            