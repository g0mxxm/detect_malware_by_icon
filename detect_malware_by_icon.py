import os
import cv2
import sys
import win32ui
import win32gui
import win32con
import win32api
import numpy as np
from PIL import Image

#target_file is the path of the malware that you want to detect
target_file = ""
# raw_ico_dir is the data set of icons
raw_ico_dir = "C:/Users/g0mx/Desktop/detect_malware_by_ico/icon"
# save_path_* is the path of the icon extracted from malware
save_path_bmp = "C:/Users/g0mx/Desktop/detect_malware_by_ico/target_ico.bmp"
save_path_png = "C:/Users/g0mx/Desktop/detect_malware_by_ico/target_ico.png"

def check_PE(target_file):
    if not os.path.isfile(target_file): 
        print(target_file + ' is not file.')
        sys.exit()
    with open(target_file, 'rb') as fp:
        # get PE header
        flag_header = fp.read(2) 
        print(flag_header)
        # get offset
        fp.seek(0x3c) 
        offset = ord(fp.read(1))
        fp.seek(offset)
        # get PE sign
        flag_sign = fp.read(4)
        print(flag_sign)
    if flag_header == b'MZ' or flag_sign == b'PE\x00\x00': 
        print(target_file + ' is a PE file.')
        return True
    else:
        print(target_file + ' is not a PE file.')
        return False

def extract_ico(target_file):
    ico_x = win32api.GetSystemMetrics(win32con.SM_CXICON)
    ico_y = win32api.GetSystemMetrics(win32con.SM_CYICON)
    #print(f"ico_x: {ico_x}")
    #print(f"ico_y: {ico_y}")

    large, small = win32gui.ExtractIconEx(target_file,0)
    #print(f"return_value is large: {large} & small : {small}")
    win32gui.DestroyIcon(small[0])

    hdc = win32ui.CreateDCFromHandle(win32gui.GetDC(0))
    hbmp = win32ui.CreateBitmap()
    hbmp.CreateCompatibleBitmap(hdc, ico_x, ico_x)
    hdc = hdc.CreateCompatibleDC()

    hdc.SelectObject(hbmp)
    hdc.DrawIcon((0,0), large[0])
    hbmp.SaveBitmapFile(hdc, save_path_bmp)

    bmpstr = hbmp.GetBitmapBits(True)
    img = Image.frombuffer('RGBA', (32,32), bmpstr, 'raw', 'BGRA', 0, 1)
    img.save(save_path_png)

def get_img_file(raw_ico_dir):
    image_list = []
    for parent, dir_names, file_names in os.walk(raw_ico_dir):
        for file_name in file_names:
            if file_name.lower().endswith(('.png')):
                image_list.append(os.path.join(parent, file_name))
        return image_list

def pHash(img, leng = 32, wid = 32):
    img = cv2.resize(img, (leng, wid))   
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    dct = cv2.dct(np.float32(gray))
    dct_roi = dct[0:8, 0:8]            
    avreage = np.mean(dct_roi)
    phash_01 = (dct_roi > avreage) + 0
    phash_list = phash_01.reshape(1,-1)[0].tolist()
    hash = ''.join([str(x) for x in phash_list])
    return hash

def Hamming_distance(hash1,hash2):
    num = 0
    for index in range(len(hash1)):
        if hash1[index] != hash2[index]:
            num += 1
    return num 

if __name__ == "__main__":
    target_file = input("Please input the target file: ")
    PE_flag = check_PE(target_file)
    extract_ico(target_file)
    image_list = get_img_file(raw_ico_dir)
    #print(image_list)
    ico_flag = False

    target_file_ico = cv2.imread(save_path_png)
    for raw_ico_path in image_list:
        raw_ico = cv2.imread(raw_ico_path)
        p_dist = Hamming_distance(pHash(raw_ico), pHash(target_file_ico))
        if p_dist < 3:
            ico_flag = True
            print(f"raw_ico is {raw_ico_path}")
            print('p_dist is '+'%d' % p_dist + ', similarity is ' +'%f' % (1 - p_dist * 1.0 / 64))
    
    if ico_flag == True and PE_flag == True:
        print("This file is a malware!!!")
    else:
        print("This file is a normal file.")