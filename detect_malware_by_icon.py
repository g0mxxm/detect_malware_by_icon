#coding: utf-8
import cv2
import os, sys, shutil, argparse
import pywintypes, win32ui, win32gui, win32con, win32api
import numpy as np
from PIL import Image

def GetDir(dir_path):
    dir_list = []
    for root, dir_names, file_names in os.walk(dir_path):
        for dir_name in dir_names:
            dir_list.append(os.path.join(root, dir_name))
        return dir_list  

def GetFile(dir_path):
    file_list = []
    for root, dir_names, file_names in os.walk(dir_path):
        for file_name in file_names:
            file_list.append(os.path.join(root, file_name))
        return file_list  

def GetImgFile(dir_path):
    image_path_list = []
    for parent, dir_names, file_names in os.walk(dir_path):
        for file_name in file_names:
            if file_name.lower().endswith(('.png')):
                image_path_list.append(os.path.join(parent, file_name))
        return image_path_list  

def CopyFile(src_file, dst_path):                      
    if not os.path.isfile(src_file):
        print ("%s not exist!"%(src_file))
    else:
        file_path,file_name = os.path.split(src_file)             
        if not os.path.exists(dst_path):
            os.makedirs(dst_path)                       
        shutil.copy(src_file, dst_path + file_name)          
        print ("copy %s -> %s"%(src_file, dst_path + file_name))  

def RenameAndCopyFile(src_file, dst_path, name):                      
    if not os.path.isfile(src_file):
        print ("%s not exist!"%(src_file))
    else:
        if not os.path.exists(dst_path):
            os.makedirs(dst_path)                       
        shutil.copy(src_file, dst_path + name)          
        print ("copy %s -> %s"%(src_file, dst_path + name))  

def CheckPE(target_file):
    if not os.path.isfile(target_file): 
        print(target_file + ' is not file.')
        sys.exit()
    with open(target_file, 'rb') as fp:
        flag_header = fp.read(2) 
        fp.seek(0x3c) 
        offset = ord(fp.read(1))
        fp.seek(offset)
        flag_sign = fp.read(4)
    if flag_header == b'MZ' or flag_sign == b'PE\x00\x00': 
        print(target_file + ' is a PE file.')
        return True
    else:
        print(target_file + ' is not a PE file.')
        return False  

def ExtractIcon(target_file):
    ico_x = win32api.GetSystemMetrics(win32con.SM_CXICON)
    try:
        large, small = win32gui.ExtractIconEx(target_file,0)
        win32gui.DestroyIcon(small[0])
    except Exception as e:
        print(e)
        return False
    hdc = win32ui.CreateDCFromHandle(win32gui.GetDC(0))
    hbmp = win32ui.CreateBitmap()
    hbmp.CreateCompatibleBitmap(hdc, ico_x, ico_x)
    hdc = hdc.CreateCompatibleDC()
    hdc.SelectObject(hbmp)
    hdc.DrawIcon((0,0), large[0])
    bmpstr = hbmp.GetBitmapBits(True)
    img = Image.frombuffer('RGBA', (32,32), bmpstr, 'raw', 'BGRA', 0, 1)

    file_path, file_name=os.path.split(target_file)
    target_icon = file_name + ".png"
    img.save(target_icon)
    return True

def PHash(img, leng = 32, wid = 32):
    img = cv2.resize(img, (leng, wid))   
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    dct = cv2.dct(np.float32(gray))
    dct_roi = dct[0:8, 0:8]            
    avreage = np.mean(dct_roi)
    PHash_01 = (dct_roi > avreage) + 0
    PHash_list = PHash_01.reshape(1,-1)[0].tolist()
    hash = ''.join([str(x) for x in PHash_list])
    return hash

def HammingDistance(hash_1,hash_2):
    num = 0
    for index in range(len(hash_1)):
        if hash_1[index] != hash_2[index]:
            num += 1
    return num 

# def Calculate_Similarity(row_target, image_path_list, hamming_distance, copy_flag, result_path, similarity_flag, export_flag):
#     for image_path in image_path_list:
#         raw_icon = cv2.imread(image_path)
#         p_dist = HammingDistance(PHash(raw_icon), PHash(row_target))
#         if p_dist < hamming_distance:
#             similarity_flag = True
#             print(f"raw_icon is {image_path}")
#             similarity = (1 - p_dist * 1.0 / 64) * 100
#             print('p_dist is '+'%d' % p_dist + ', similarity is ' + '%f' % similarity + '%')
#             if copy_flag == True:
#                 file_tuple = os.path.split(image_path)
#                 pos = file_tuple[1].find('.', 0, len(file_tuple[1]))
#                 file_name = file_tuple[1][:pos]
#                 target_icon_name = target_icon + "_" + file_name + "_" + "similarity is " + str(similarity) + '%' + ".png"
#                 RenameAndCopyFile(image_path, result_path, target_icon_name)
#     if similarity_flag == True:
#         if export_flag == True:
#             print("target_icon: " + target_icon)
#             CopyFile(target_icon, result_path)
#         print("[+] This file is a malware!!!")
#     else:
#         print("[+] This file is a normal file.")

def Calculate_Similarity(row_target, image_path_list, hamming_distance, similarity_flag):
    max_similarity = 0
    max_image_path = ''
    for image_path in image_path_list:
        raw_icon = cv2.imread(image_path)
        p_dist = HammingDistance(PHash(raw_icon), PHash(row_target))
        if p_dist < hamming_distance:
            similarity_flag = True
            print(f"raw_icon is {image_path}")
            similarity = (1 - p_dist * 1.0 / 64) * 100
            print('p_dist is '+'%d' % p_dist + ', similarity is ' + '%f' % similarity + '%')
            if similarity > max_similarity:
                max_similarity = similarity
                max_image_path = image_path
    return similarity_flag, max_similarity, max_image_path

def RecordResult(target_name, target_icon, dir_path, image_path, similarity, result_path):
    CopyFile(target_icon, result_path)
    _, file_name = os.path.split(image_path)
    _, dir_name = os.path.split(dir_path)
    # print("file_name: " + file_name)
    # print("dir_name: " + dir_name)
    result_txt_path = result_path + target_name + ".txt"
    # print("resule_txt_path: " + result_txt_path)
    with open(result_txt_path, mode = 'w') as f:
        f.write(dir_name + "/" + file_name + '\t' + str(similarity))
        f.close()

if __name__ == "__main__":

    def auto_int(x):
        return int(x, 0)

    parser = argparse.ArgumentParser(description='detect.py [-f <target file>] [-p <result path>] [<presets>, ...]')
    parser.add_argument('-f', '--target_file', dest = "target", default = "", help = "Set process name to start")
    parser.add_argument('-p', '--result_path', dest = "result_path", default = "C:/Users/g0mx/Desktop/result/", help = "Set the path of result")
    parser.add_argument('-P', '--icon_path', dest = "icon_dir", default = "C:/Users/g0mx/Desktop/detect_malware_by_icon/icon", help = "Set the path of icon database")
    parser.add_argument('-d', '--hamming_distance', dest = "hamming_distance", default = 5, type = auto_int, help = "Set distance to regulate the sensitivity of algorithm")
    parser.add_argument('--copy_icon', dest = "copy_flag", default = True, metavar = "COPY_ICON", help = "The flag that whether to copy the icon from the database of icon")
    parser.add_argument('--export_icon', dest = "export_flag", default = True, metavar = "EXPORT_ICON", help = "The flag that whether to export the target file's icon")
    args = parser.parse_args()

    if os.path.isdir(args.target):
        target_list = GetFile(args.target)
        dir_list = GetDir(args.icon_dir)
        for target_name in target_list:
            PE_flag = CheckPE(target_name)
            file_path, file_name = os.path.split(target_name)
            target_icon = file_name + ".png"
            similarity_flag = False
            g_max_similarity = 0
            if ExtractIcon(target_name) == True and PE_flag == True:
                target_icon_info = cv2.imread(target_icon)
                for dir_path in dir_list:
                    icon_list = GetImgFile(dir_path)
                    similarity_flag, max_similarity, max_image_path = Calculate_Similarity(target_icon_info, icon_list, args.hamming_distance, similarity_flag)
                    if max_similarity > g_max_similarity:
                        g_max_similarity = max_similarity
                        g_max_image_path = max_image_path
                        g_max_dir_path = dir_path
                    if similarity_flag == True:
                        g_similarity_flag = True
                if similarity_flag == True:
                    RecordResult(file_name, target_icon, g_max_dir_path, g_max_image_path, g_max_similarity, args.result_path)
                    print("[+] This file is a malware!!!")
                else:
                    print("[+] This file is a normal file.")                
            else:
                print("[+] This file don't include icon!")
                continue
            os.remove(target_icon)

    elif os.path.isfile(args.target):
        dir_list = GetDir(args.icon_dir)
        PE_flag = CheckPE(args.target)
        file_path, file_name = os.path.split(args.target)
        target_icon = file_name + ".png"
        similarity_flag = False
        g_max_similarity = 0
        if ExtractIcon(args.target) == True and PE_flag == True:
            target_icon_info = cv2.imread(target_icon)
            for dir_path in dir_list:
                icon_list = GetImgFile(dir_path)
                similarity_flag, max_similarity, max_image_path = Calculate_Similarity(target_icon_info, icon_list, args.hamming_distance, similarity_flag)
                if max_similarity > g_max_similarity:
                    g_max_similarity = max_similarity
                    g_max_image_path = max_image_path
                    g_max_dir_path = dir_path
                if similarity_flag == True:
                    g_similarity_flag = True
            if similarity_flag == True:
                RecordResult(file_name, target_icon, g_max_dir_path, g_max_image_path, g_max_similarity, args.result_path)
                print("[+] This file is a malware!!!")
            else:
                print("[+] This file is a normal file.")                
        else:
            print("[+] This file don't include icon!")
        os.remove(target_icon)


